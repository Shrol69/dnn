import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist


(x_train,y_train),(x_test,y_test)=mnist.load_data()


x_train=x_train/255.0
x_test=x_test/255.0


x_train=torch.Tensor(x_train).unsqueeze(1)
x_test=torch.Tensor(x_test).unsqueeze(1)


y_train=torch.Tensor(y_train).long()
y_test=torch.Tensor(y_test).long()


class SimpleNN(nn.Module):
    def __init__(self):
        super(SimpleNN,self).__init__()
        self.fc1=nn.Linear(28*28,128)
        self.fc2=nn.Linear(128,64)
        self.fc3=nn.Linear(64,10)
    def forward(self,x):
        x=x.view(-1,28*28)
        x=torch.relu(self.fc1(x))
        x=torch.relu(self.fc2(x))
        x=self.fc3(x)
        return x
model=SimpleNN()
criterion=nn.CrossEntropyLoss()
optimizer=optim.Adam(model.parameters(),lr=0.001)


epochs=10
for epoch in range(epochs):
    running_loss=0.0
    optimizer.zero_grad()
    outputs=model(x_train)
    loss=criterion(outputs,y_train)
    loss.backward()
    optimizer.step()
    running_loss += loss.item()
    print(f'{epoch+1} loss: {running_loss} ')


correct = 0
total = 0
with torch.no_grad():
    outputs = model(x_test)
    _, predicted = torch.max(outputs.data, 1)
    total += y_test.size(0)
    correct += (predicted == y_test).sum().item()
accuracy = 100 * correct / total
print(f'Accuracy of the model on the test set: {accuracy:.2f}%')


image = x_test[3].squeeze().numpy()
plt.imshow(image)
plt.show()
image = image.reshape(1, 28*28)
image = torch.Tensor(image)
output = model(image)
_, predicted_label = torch.max(output.data, 1)
print(f"Predicted Label: {predicted_label.item()}")


###Regression
import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import seaborn as sns
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt


df = sns.load_dataset('iris')
df.head()
x = df.drop(columns=['sepal_length'])
y = df['sepal_length']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
le = LabelEncoder()
x_train['species'] = le.fit_transform(x_train['species'])
x_test['species'] = le.transform(x_test['species'])


x_train_tensor = torch.tensor(x_train.values, dtype=torch.float32)
x_test_tensor = torch.tensor(x_test.values, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32).view(-1, 1)
y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32).view(-1, 1)


class RegressionModel(nn.Module):
    def __init__(self):
        super(RegressionModel, self).__init__()
        self.fc1 = nn.Linear(x_train_tensor.shape[1], 64)
        self.fc2 = nn.Linear(64, 32)
        self.fc3 = nn.Linear(32, 1)
    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x
model = RegressionModel()
criterion = nn.MSELoss() 
optimizer = optim.Adam(model.parameters(), lr=0.1)


epochs = 25
for epoch in range(epochs):
    model.train()
    predictions = model(x_train_tensor)
    loss = criterion(predictions, y_train_tensor)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}')


model.eval()
with torch.no_grad():
    test_predictions = model(x_test_tensor)
    for pred, actual in zip(test_predictions, y_test_tensor):
        print(f'Predicted Val: {pred.item()}, Actual Value: {actual.item()}')


r2 = r2_score(y_test_tensor.numpy(), test_predictions.numpy())
print(f'R-squared: {r2:.4f}')