import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.regularizers import l1, l2
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.datasets import mnist


(x_train, y_train), (x_test, y_test) = mnist.load_data()



x_train = x_train.reshape(-1, 28, 28, 1)  # Shape: (60000, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1) 


x_train = x_train / 255.0
x_test = x_test / 255.0


datagen = ImageDataGenerator(
    rotation_range=20,
    zoom_range=0.2,
)


model = Sequential([
    Flatten(input_shape=(28, 28)),
    Dense(128, activation='relu', kernel_regularizer=l2(0.01)),  # L2 Regularization
    Dropout(0.5),  # Dropout Layer
    Dense(10, activation='softmax')
])


early_stopping = EarlyStopping(monitor='val_loss', patience=3,restore_best_weights=True)


model.compile(optimizer=Adam(learning_rate=0.001),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])


history = model.fit(datagen.flow(x_train, y_train),
                    epochs=10,
                    validation_data=(x_test, y_test),
                    callbacks=[early_stopping])


##Regression
import numpy as np
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt


df=sns.load_dataset('iris')
df.head()


x=df.drop(columns=['sepal_length'])
y=df['sepal_length']


x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)


le=LabelEncoder()
x_train['species']=le.fit_transform(x_train['species'])
x_test['species']=le.transform(x_test['species'])


noise_factor = 0.1
x_train_noisy = x_train + noise_factor * np.random.normal(size=x_train.shape)
x_test_noisy = x_test + noise_factor * np.random.normal(size=x_test.shape)


model=Sequential([
    Dense(64,activation='relu',input_shape=(x_train.shape[1],)),
    Dropout(0.5),
    Dense(32,activation='relu'),
    Dropout(0.5),
    Dense(1)
])
early_stopping=EarlyStopping(monitor='val_loss',patience=3,restore_best_weights=True)
model.compile(optimizer=Adam(learning_rate=0.001),loss='mean_squared_error',metrics=['mae'])
history=model.fit(x_train_noisy,y_train,epochs=25,validation_data=(x_test_noisy,y_test),callbacks=early_stopping)


