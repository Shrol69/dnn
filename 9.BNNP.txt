import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt
from sklearn.datasets import load_wine, fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score

# ------------------ Classification using Wine Dataset ------------------

# Load the Wine dataset
wine = load_wine()
X_class = wine.data  # Features
y_class = wine.target  # Target labels

# Standardize the features
scaler = StandardScaler()
X_class_scaled = scaler.fit_transform(X_class)

# Split into training and testing sets
X_train_class, X_test_class, y_train_class, y_test_class = train_test_split(X_class_scaled, y_class, test_size=0.2, random_state=42)

# Convert to PyTorch tensors
X_train_class_tensor = torch.tensor(X_train_class, dtype=torch.float32)
X_test_class_tensor = torch.tensor(X_test_class, dtype=torch.float32)
y_train_class_tensor = torch.tensor(y_train_class, dtype=torch.long)
y_test_class_tensor = torch.tensor(y_test_class, dtype=torch.long)

# Define the classification model
class ClassificationModel(nn.Module):
    def __init__(self):
        super(ClassificationModel, self).__init__()
        self.fc1 = nn.Linear(13, 128)  # 13 features in the Wine dataset
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 3)  # 3 classes in Wine dataset

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# Instantiate the model, loss function, and optimizer
model_class = ClassificationModel()
criterion_class = nn.CrossEntropyLoss()
optimizer_class = optim.Adam(model_class.parameters(), lr=0.001)

# Train the classification model
epochs = 10
for epoch in range(epochs):
    model_class.train()
    optimizer_class.zero_grad()
    outputs_class = model_class(X_train_class_tensor)
    loss_class = criterion_class(outputs_class, y_train_class_tensor)
    loss_class.backward()
    optimizer_class.step()
    print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss_class.item():.4f}')

# Test the classification model
model_class.eval()
with torch.no_grad():
    outputs_class = model_class(X_test_class_tensor)
    _, predicted_class = torch.max(outputs_class.data, 1)
    accuracy_class = (predicted_class == y_test_class_tensor).sum().item() / y_test_class_tensor.size(0)
    print(f'Classification Accuracy: {accuracy_class * 100:.2f}%')

# ------------------ Regression using California Housing Dataset ------------------

# Load the California Housing dataset
california = fetch_california_housing()
X_reg = california.data  # Features
y_reg = california.target  # Target variable (house prices)

# Standardize the features
X_reg_scaled = scaler.fit_transform(X_reg)

# Split into training and testing sets
X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(X_reg_scaled, y_reg, test_size=0.2, random_state=42)

# Convert to PyTorch tensors
X_train_reg_tensor = torch.tensor(X_train_reg, dtype=torch.float32)
X_test_reg_tensor = torch.tensor(X_test_reg, dtype=torch.float32)
y_train_reg_tensor = torch.tensor(y_train_reg, dtype=torch.float32).view(-1, 1)
y_test_reg_tensor = torch.tensor(y_test_reg, dtype=torch.float32).view(-1, 1)

# Define the regression model
class RegressionModel(nn.Module):
    def __init__(self):
        super(RegressionModel, self).__init__()
        self.fc1 = nn.Linear(X_train_reg_tensor.shape[1], 64)
        self.fc2 = nn.Linear(64, 32)
        self.fc3 = nn.Linear(32, 1)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# Instantiate the model, loss function, and optimizer
model_reg = RegressionModel()
criterion_reg = nn.MSELoss()
optimizer_reg = optim.Adam(model_reg.parameters(), lr=0.001)

# Train the regression model
epochs = 25
for epoch in range(epochs):
    model_reg.train()
    optimizer_reg.zero_grad()
    outputs_reg = model_reg(X_train_reg_tensor)
    loss_reg = criterion_reg(outputs_reg, y_train_reg_tensor)
    loss_reg.backward()
    optimizer_reg.step()
    print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss_reg.item():.4f}')

# Test the regression model
model_reg.eval()
with torch.no_grad():
    outputs_reg = model_reg(X_test_reg_tensor)
    for pred, actual in zip(outputs_reg, y_test_reg_tensor):
        print(f'Predicted: {pred.item():.2f}, Actual: {actual.item():.2f}')

# Calculate R2 score for regression
r2 = r2_score(y_test_reg_tensor.numpy(), outputs_reg.numpy())
print(f'Regression R2 Score: {r2:.4f}')